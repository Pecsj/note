知识回顾
	类-----抽象 笼统的概念
	   属性
		权限修饰符 [特征修饰符] 属性类型 属性名字 [= 值];  (如果不写是有默认值)
	   方法
		权限修饰符 [特征修饰符] 返回值类型 方法名字 ([参数列表]) [抛出异常] [{方法体}]
		方法重载overload
		一个类中 一组方法  名字相同  参数列表不同  构成方法重载
		参数不同体现在  个数 类型 顺序
		动态参数列表使用 
	   构造方法
		权限修饰符 与类名一致的方法名 ([参数列表]) [抛出异常] {方法体}
		1.作用 : 用来创建当前类的对象
		2.结构和写法 : 没有返回类型  有返回值
		3.调用 : 通过new关键字
		4.特点 : 每一个类都有默认无参数的构造方法 我们自己定义了新的  默认的构造方法即被覆盖
		            构造方法也存在方法重载
	   程序块(代码块)
		可以理解为是一个非常特殊的方法
		没有修饰符 没有返回类型 没有名字 没有参数
		只有一个方法的执行体{}
		程序块是在每一次调用构造方法之前都会默认自动执行
		程序块没有重载  却可以存在多个  按照创建的顺序逐一执行

	   this关键字的使用
		1.指代词  代替的是调用属性/方法时的当前的对象
		2.this既然是一个对象  可以调用一般属性 可以调用一般的方法
			放置在类成员的任何位置(四个成员都可以)
			方法之间来回的调用???
			写法可以的(编译好用)  执行可能会产生StackOverflowError 栈溢出错误
		3.this也可以调用构造方法  this(xx);  
			将这给代码放在另一个构造方法内  需要在第一行
			构造方法不能来回互相调用(编译就不好用)
			(这个问题等待讲解继承--->)
=====================================================================
	知识补充  关于Scanner类及其中方法的使用
		1.导包               java.util
		2.创建对象	        Scanner input = new Scanner(System.in);
		3.做事情	        int value = input.nextInt();
			        String value = input.nextLine();

		nextInt(nextFloat nextByte)  next  nextLine
		1.读取方式上来讲   大家都以回车符作为结束符号
			除了nextLine以外其余的方法都不读取回车符
		2.读取的返回结果来讲  nextInt-->int   nextFloat--float
				next--String   nextLine-->String
				next方法看到回车或空格都认为结束   nextLine只认为回车符结束
				输入abc   def   g		        输入abc   def   g
				abc			        abc   def   g
		3.利用包装类做String与基本类型的转化问题
			int value = Integer.parseInt("123");//如果字符串不是一个整数形式 就会产生
			Float.parseFloat("123.34");

		InputMisMatchException
		ArrayIndexOutOfBoundsException
		NegativeArraySizeException
		NullPointerException
		NumberFormatException

		StackOverflowError

	小任务:
	1.设计一个类模拟一个计算器   做什么  加减乘除  方法   计算方法
		控制台输出
		请输入第一个数
		1
		请输入符号
		+
		请输入第二个数
		2
		3
		请输入符号
		-
		请输入第二个数
		2
		1
	2.设计一个类 替代数组可以做的事情
		数组  长度是固定  存储一组元素  
			长度一旦固定 使用起来不太方便  添加元素  删除元素
		设计一个类---充当一个小容器   ArrayBox
		能添加元素  获取元素  删除元素  看一看到底有几个