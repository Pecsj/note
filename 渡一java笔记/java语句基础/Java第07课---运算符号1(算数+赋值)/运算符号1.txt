知识回顾
基本数据类型  引用数据类型
类型转换之前 保证大前提 同种大数据类型一致
	基本--基本   可以直接转换(自动 强制)
	引用--引用   可以直接转化(自动 强制)
	基本--引用   不可以直接进行转化(间接-桥梁-包装类)
保证大数据类型一致的前提下(都是基本类型)
	小数据类型一致
	   整型--整型 / 浮点--浮点
	   比较内存空间的大小
	   大数据类型空间可以直接接受小数据类型的值(自动转换)
	   小数据类型空间不可以直接接受大数据类型的值(强制类型转换)
	   强制类型转换 写法好用 但是需要注意取值范围的问题 丢失一部分数据
	小数据类型不一致
	   整型--浮点
	   比较精确程度
	   浮点型的精确程度更高
	   任何一个浮点型空间都可以直接接受一个整型的值
	   反之需要进行强制类型转换(强行将小数点之后的部分去掉 只保留整数)
	   整型--字符
	   Unicode码
	*布尔类型很特殊的基本数据类型 不能与其他的基本类型转换
=======================================================
Java运算符
	运算符 用来指明对于操作数的运算方式
	按照操作数的数目来进行分类
	   单目   双目   三目
	   a++   a+b   (a>b) ? x : y ;
	按照运算符的功能来进行分类
	算术运算
	   +  -  *  /  %(取余 取模)
	   ++(自增)  --(自减)
		int x = 1 ;
		x = x+1 ;//x空间内的值 自己增加了一个
		x++;//x空间内的值 自增一个
		++x;//对于x空间内的值来讲 都是一致  最终的结果都自增了一个
		-------------------------------------------
		int x = 1;
		int y = x++;//++在后 先赋值 后自增(先进行计算 后赋值)
			x++;//x=x+1;//将x变量空间的内容先取出 常量区取出1 进行计算 再次存回x空间
				x在想要做值交换的时候 会产生一个临时的副本空间(备份)
				++在变量的前面  先自增后备份   ++在变量的后面  先备份后自增
				会将副本空间内的值赋给别人
		x==?2   y==?1
		-------------------------------------------
		int a = 1;
		for(int i=1;i<=100;i++){//循环结构
			a = a++;
		}
		a==? 1
		-------------------------------------------
		int m = 1;//210
		int n = 2;//321
		int sum = m++  +  ++n  -  n--  -  --m  +  n--  -  --m;
			   1      +   3     -    3   -   1     +   2    -   0
		m==?0  n==?1  sum==?2
	赋值运算
		=  赋值符号  将=右边的内容(值 引用) 存入=左边的变量空间内
		+=    -=    *=    /=    %=
		int x = 1;
		x+=10;//x=x+10;
	
		x++;//x自增了一个  需求 让x增加10个  for循环结构
		x++;//x=x+10;
		x++	for(int i=1;i<=10;i++){
		x++		x++;
		x++	}
		。。。

		int x = 1;
		x+=2;//3
		x=x+2;//3

		byte x = 1;//1常量32bit =自动转化
		x+=2;// x+2 +自动类型提升 3 =自动转化
		x = (byte)(x+2);//编译出错  类型从int转化成byte可能有损失
			x变量空间的值取出  从常量区取过来2  加法运算  结果重新存回x变量空间内
			 x空间-->1    8bit
			常量区-->2   32bit
			00000001 + 00000000 00000000 00000000 00000010
	+自动类型提升 8bit1--32bit
			  00000000 00000000 00000000 00000001
			  00000000 00000000 00000000 00000010
			+00000000 00000000 00000000 00000011==3
========================================================================	
	关系运算(比较)
	逻辑运算
	位(bit)运算