知识回顾
	抽象类及抽象方法
	抽象方法:用abstract修饰符修饰的方法，只有方法的结构，没有方法执行体，称之为抽象方法(与native区别)
	抽象类:用abstract修饰符修饰的类，称之为抽象类
	抽象类的特点:
	   1.含有的成员
		属性:一般的 static final都可以
		方法:一般的 static final都可以   也可以重载
			----->允许含有抽象方法的
		块:一般的 static的块都可以
		构造方法: 可以含有构造方法  也可以重载
	   2.如何使用
		抽象类虽然含有构造方法，但是不能直接调用构造方法创建该类的对象
		只能通过子类单继承来做事，构造方法是留给子类创建对象时间接调用
	   3.类和类之间的关系
		抽象类可以直接单继承抽象类
		抽象类可以直接单继承具体类
		具体类不可以直接单继承抽象类(需要让具体类将抽象的方法重写 添加具体执行过程 否则该子类也变成抽象类)

	抽象类中可以没有抽象方法  全都是具体成员
	抽象类中可以没有具体成员  全都是抽象方法

	接口interface的特点:
	   1.含有的成员:
		属性： 只能是公有的静态的常量  public static final
		方法： 只能含有公有的抽象的方法   (1.8之后可以用default来修饰具体方法)
		块： 没有一般块  也没有静态块(块就是具体执行过程 接口里全都是抽象的 所以没有)
		构造方法：没有构造方法
	   2.如何使用:
		接口没有构造方法，不能创建对象，只能通过子类多实现(implements)来做事
	   3.接口与接口  接口与类之间的关系
		接口不能继承其他的类   抽象类  具体类都不行
		接口可以直接多继承接口
		抽象类可以直接多实现接口   public abstract class A implements B,C{}
		具体类不可以直接多实现接口(需要将接口中的抽象方法具体化，否则该子类也需要变成抽象类)
==========================================================================
	权限   public protected 默认 private
	特征   final static abstract native  


	类的设计    小任务
	大家设计一个类ArrayBox
	目的是  数组有些地方不是很好  长度固定  频繁添加元素  删除元素  个数改变

	最早 利用数组存储一组元素  
		长度固定  好处在于创建后不会浪费内存  
		不好在于长度不变  添加删除时个数的改变很麻烦
	自己可以设计类  ArrayBox
		长度看似可以改变  好处在于添加 删除时不需要纠结长度变化的问题
		不好在于  插入 删除效率低  不断的移动元素的位置进行覆盖
		add   get   remove   size
	再设计一个类    LinkedBox    链表 链式  火车   联络网   小A<-->小B<-->小C<-->小D
		长度看似可以改变  
		解决了插入和删除效率低的问题   不适合遍历
	接口-----定义规则
	多态





















